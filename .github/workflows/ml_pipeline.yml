name: ML Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install CPU-only PyTorch
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        # Install other dependencies
        pip install numpy matplotlib pytest pytest-md
        # Install visualization tools
        sudo apt-get update
        sudo apt-get install -y graphviz
        pip install graphviz torchviz
    
    - name: Create directories
      run: |
        mkdir -p models
        mkdir -p visualizations
        mkdir -p visualizations/augmentations
    
    - name: Generate augmentation visualizations
      env:
        SKIP_VIZ: 0
        PYTHONPATH: ${GITHUB_WORKSPACE}
      run: |
        echo "Generating augmentation visualizations..."
        # Create required directories
        mkdir -p visualizations/augmentations
        mkdir -p visualizations/augmented_samples
        
        # Create and run Python script
        cat << EOF > generate_viz.py
        import torch
        from torchvision import datasets, transforms
        from utils.augmentation_viz import visualize_augmentations

        # Get sample images
        transform = transforms.ToTensor()
        dataset = datasets.MNIST('./data', train=True, download=True, transform=transform)

        # Get samples of different digits (0-9)
        samples = []
        labels = []
        seen_digits = set()

        for img, label in dataset:
            if label.item() not in seen_digits:
                samples.append(img)
                labels.append(label)
                seen_digits.add(label.item())
                if len(seen_digits) == 5:  # Get 5 different digits
                    break

        # Generate visualizations for each sample
        for idx, (img, label) in enumerate(zip(samples, labels)):
            print(f'Generating augmentations for digit {label}...')
            visualize_augmentations(img, num_samples=5, digit=label.item())
        EOF

        # Run the script
        python generate_viz.py
        
        # List generated files
        echo "Generated files:"
        ls -R visualizations/augmentations/
        ls -R visualizations/augmented_samples/
    
    - name: Train model
      env:
        CUDA_VISIBLE_DEVICES: ""
        TORCH_DEVICE: "cpu"
        SKIP_VIZ: 1  # Skip visualization during training
      run: |
        echo "Starting model training..."
        python train.py
        echo "Training completed."
        echo "TRAINED_MODEL_PATH=$(ls -t models/*.pth | head -1)" >> $GITHUB_ENV
    
    - name: Run tests
      env:
        CUDA_VISIBLE_DEVICES: ""
        TORCH_DEVICE: "cpu"
        SKIP_VIZ: 1
      run: |
        echo "Running model tests..."
        echo "Using model: $TRAINED_MODEL_PATH"
        pytest tests/test_model.py -v -s
        echo "Testing completed."
    
    - name: Generate test summary
      run: |
        echo "## ML Pipeline Results" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "visualizations/augmentations/README.md" ]; then
          echo "### Data Augmentation" >> $GITHUB_STEP_SUMMARY
          cat visualizations/augmentations/README.md >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "visualizations/model_architecture.txt" ]; then
          echo "### Model Architecture" >> $GITHUB_STEP_SUMMARY
          cat visualizations/model_architecture.txt >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "test-summary.md" ]; then
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          cat test-summary.md >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: ml-pipeline-artifacts
        path: |
          models/
          visualizations/
          visualizations/augmentations/
          test-summary.md
          .pytest_cache/
    
    - name: Verify requirements
      run: |
        echo "Checking model requirements..."
        
        # Check parameter count
        if [ -f "visualizations/model_architecture.txt" ]; then
          PARAM_COUNT=$(grep "Total Parameters:" visualizations/model_architecture.txt | awk '{print $3}' | tr -d ',')
          if [ "$PARAM_COUNT" -gt 25000 ]; then
            echo "❌ Parameter count ($PARAM_COUNT) exceeds limit of 25,000"
            exit 1
          else
            echo "✅ Parameter count ($PARAM_COUNT) within limit"
          fi
        fi
        
        # Check accuracy
        if [ -f "test-summary.md" ]; then
          if grep -q "FAILED" test-summary.md; then
            echo "❌ Model tests failed!"
            exit 1
          else
            echo "✅ All model tests passed"
          fi
        else
          echo "❌ Test summary not found"
          exit 1
        fi

    - name: Cleanup
      if: always()
      run: |
        rm -rf .pytest_cache
        rm -rf __pycache__