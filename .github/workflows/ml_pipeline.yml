name: ML Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install CPU-only PyTorch
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        # Install other dependencies
        pip install numpy matplotlib pytest pytest-md
        # Install visualization tools
        sudo apt-get update
        sudo apt-get install -y graphviz tree
        pip install graphviz torchviz
    
    - name: Create directories
      run: |
        mkdir -p models
        mkdir -p visualizations
        mkdir -p visualizations/augmentations
    
    - name: Generate augmentation visualizations
      env:
        SKIP_VIZ: 0
        PYTHONPATH: ${GITHUB_WORKSPACE}
      run: |
        echo "Generating augmentation visualizations..."
        # Create directories
        mkdir -p visualizations/augmentations
        
        # Generate augmentations
        python -c "
        import matplotlib
        matplotlib.use('Agg')  # Set non-interactive backend
        from tests.test_model import generate_augmentation_samples
        generate_augmentation_samples()
        "
        
        # List generated files
        echo "Generated files:"
        tree visualizations/augmentations/
        
        # Verify files exist
        if [ ! -f "visualizations/augmentations/README.md" ]; then
          echo "Error: README.md not generated!"
          exit 1
        fi
        
        # Count PNG files
        png_count=$(find visualizations/augmentations -name "*.png" | wc -l)
        echo "Generated ${png_count} image files"
    
    - name: Train model
      env:
        CUDA_VISIBLE_DEVICES: ""
        TORCH_DEVICE: "cpu"
        SKIP_VIZ: 1  # Skip visualization during training
      run: |
        echo "Starting model training..."
        python train.py
        echo "Training completed."
        echo "TRAINED_MODEL_PATH=$(ls -t models/*.pth | head -1)" >> $GITHUB_ENV
    
    - name: Run tests
      env:
        CUDA_VISIBLE_DEVICES: ""
        TORCH_DEVICE: "cpu"
        SKIP_VIZ: 1
      run: |
        echo "Running model tests..."
        echo "Using model: $TRAINED_MODEL_PATH"
        pytest tests/test_model.py -v -s
        echo "Testing completed."
    
    - name: Generate test summary
      run: |
        echo "## ML Pipeline Results" >> $GITHUB_STEP_SUMMARY
        
        # Add augmentation section
        if [ -d "visualizations/augmentations" ]; then
          echo "### Data Augmentations" >> $GITHUB_STEP_SUMMARY
          echo "Generated files:" >> $GITHUB_STEP_SUMMARY
          tree visualizations/augmentations >> $GITHUB_STEP_SUMMARY
          
          # Include main augmentation README if it exists
          if [ -f "visualizations/augmentations/README.md" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Augmentation Details" >> $GITHUB_STEP_SUMMARY
            cat visualizations/augmentations/README.md >> $GITHUB_STEP_SUMMARY
          else
            echo "Warning: README.md not found in augmentations directory" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Count generated files
          png_count=$(find visualizations/augmentations -name "*.png" | wc -l)
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Total generated images: ${png_count}" >> $GITHUB_STEP_SUMMARY
        else
          echo "Warning: No augmentation directory found" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: ml-pipeline-artifacts
        path: |
          models/
          visualizations/augmentations/
          visualizations/augmentations/**/*
          test-summary.md
    
    - name: Verify requirements
      run: |
        echo "Checking model requirements..."
        
        # Check parameter count
        if [ -f "visualizations/model_architecture.txt" ]; then
          PARAM_COUNT=$(grep "Total Parameters:" visualizations/model_architecture.txt | awk '{print $3}' | tr -d ',')
          if [ "$PARAM_COUNT" -gt 25000 ]; then
            echo "❌ Parameter count ($PARAM_COUNT) exceeds limit of 25,000"
            exit 1
          else
            echo "✅ Parameter count ($PARAM_COUNT) within limit"
          fi
        fi
        
        # Check accuracy
        if [ -f "test-summary.md" ]; then
          if grep -q "FAILED" test-summary.md; then
            echo "❌ Model tests failed!"
            exit 1
          else
            echo "✅ All model tests passed"
          fi
        else
          echo "❌ Test summary not found"
          exit 1
        fi

    - name: Cleanup
      if: always()
      run: |
        rm -rf .pytest_cache
        rm -rf __pycache__